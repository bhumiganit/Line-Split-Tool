# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Line_Split_Tool
                                 A QGIS plugin
 This Tool splits the line
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by me
        email                : me
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
# from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
# from qgis.PyQt.QtGui import QIcon
# from qgis.PyQt.QtWidgets import QAction

# # Initialize Qt resources from file resources.py
# from .resources import *
# # Import the code for the dialog
# from .line_split_tool_dialog import Line_Split_ToolDialog
# import os.path
# from qgis.core import (
#   QgsApplication,
#   QgsDataSourceUri,
#   QgsCategorizedSymbolRenderer,
#   QgsClassificationRange,
#   QgsPointXY,
#   QgsProject,
#   QgsExpression,
#   QgsField,
#   QgsFields,
#   QgsFeature,
#   QgsFeatureRequest,
#   QgsFeatureRenderer,
#   QgsGeometry,
#   QgsGraduatedSymbolRenderer,
#   QgsMarkerSymbol,
#   QgsMessageLog,
#   QgsRectangle,
#   QgsRendererCategory,
#   QgsRendererRange,
#   QgsSymbol,
#   QgsVectorDataProvider,
#   QgsVectorLayer,
#   QgsVectorFileWriter,
#   QgsWkbTypes,
#   QgsSpatialIndex,
#   QgsVectorLayerUtils
# )

# from qgis.core.additions.edit import edit

# from qgis.PyQt.QtGui import (
#     QColor,
# )

# class Line_Split_Tool:
#     """QGIS Plugin Implementation."""

#     def __init__(self, iface):
#         """Constructor.

#         :param iface: An interface instance that will be passed to this class
#             which provides the hook by which you can manipulate the QGIS
#             application at run time.
#         :type iface: QgsInterface
#         """
#         # Save reference to the QGIS interface
#         self.iface = iface
#         # initialize plugin directory
#         self.plugin_dir = os.path.dirname(__file__)
#         # initialize locale
#         locale = QSettings().value('locale/userLocale')[0:2]
#         locale_path = os.path.join(
#             self.plugin_dir,
#             'i18n',
#             'Line_Split_Tool_{}.qm'.format(locale))

#         if os.path.exists(locale_path):
#             self.translator = QTranslator()
#             self.translator.load(locale_path)
#             QCoreApplication.installTranslator(self.translator)

#         # Declare instance attributes
#         self.actions = []
#         self.menu = self.tr(u'&Line_Split_Tool')

#         # Check if plugin was started the first time in current QGIS session
#         # Must be set in initGui() to survive plugin reloads
#         self.first_start = None

#     # noinspection PyMethodMayBeStatic
#     def tr(self, message):
#         """Get the translation for a string using Qt translation API.

#         We implement this ourselves since we do not inherit QObject.

#         :param message: String for translation.
#         :type message: str, QString

#         :returns: Translated version of message.
#         :rtype: QString
#         """
#         # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
#         return QCoreApplication.translate('Line_Split_Tool', message)


#     def add_action(
#         self,
#         icon_path,
#         text,
#         callback,
#         enabled_flag=True,
#         add_to_menu=True,
#         add_to_toolbar=True,
#         status_tip=None,
#         whats_this=None,
#         parent=None):
#         """Add a toolbar icon to the toolbar.

#         :param icon_path: Path to the icon for this action. Can be a resource
#             path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
#         :type icon_path: str

#         :param text: Text that should be shown in menu items for this action.
#         :type text: str

#         :param callback: Function to be called when the action is triggered.
#         :type callback: function

#         :param enabled_flag: A flag indicating if the action should be enabled
#             by default. Defaults to True.
#         :type enabled_flag: bool

#         :param add_to_menu: Flag indicating whether the action should also
#             be added to the menu. Defaults to True.
#         :type add_to_menu: bool

#         :param add_to_toolbar: Flag indicating whether the action should also
#             be added to the toolbar. Defaults to True.
#         :type add_to_toolbar: bool

#         :param status_tip: Optional text to show in a popup when mouse pointer
#             hovers over the action.
#         :type status_tip: str

#         :param parent: Parent widget for the new action. Defaults None.
#         :type parent: QWidget

#         :param whats_this: Optional text to show in the status bar when the
#             mouse pointer hovers over the action.

#         :returns: The action that was created. Note that the action is also
#             added to self.actions list.
#         :rtype: QAction
#         """

#         icon = QIcon(icon_path)
#         action = QAction(icon, text, parent)
#         action.triggered.connect(callback)
#         action.setEnabled(enabled_flag)

#         if status_tip is not None:
#             action.setStatusTip(status_tip)

#         if whats_this is not None:
#             action.setWhatsThis(whats_this)

#         if add_to_toolbar:
#             # Adds plugin icon to Plugins toolbar
#             self.iface.addToolBarIcon(action)

#         if add_to_menu:
#             self.iface.addPluginToMenu(
#                 self.menu,
#                 action)

#         self.actions.append(action)

#         return action

#     def initGui(self):
#         """Create the menu entries and toolbar icons inside the QGIS GUI."""

#         icon_path = ':/plugins/line_split_tool/icon.png'
#         self.add_action(
#             icon_path,
#             text=self.tr(u'Line Split Tool'),
#             callback=self.run,
#             parent=self.iface.mainWindow())

#         # will be set False in run()
#         self.first_start = True


#     def unload(self):
#         """Removes the plugin menu item and icon from QGIS GUI."""
#         for action in self.actions:
#             self.iface.removePluginMenu(
#                 self.tr(u'&Line_Split_Tool'),
#                 action)
#             self.iface.removeToolBarIcon(action)


#     def run(self):
#         """Run method that performs all the real work"""

#         # Create the dialog with elements (after translation) and keep reference
#         # Only create GUI ONCE in callback, so that it will only load when the plugin is started
#         if self.first_start == True:
#             self.first_start = False
#             self.dlg = Line_Split_ToolDialog()
#             self.dlg.button_box.clicked.connect(self.split_line_fun)

#         # show the dialog
#         self.dlg.show()
#         # Run the dialog event loop
#         result = self.dlg.exec_()
#         # See if OK was pressed
#         if result:
#             # Do something useful here - delete the line containing pass and
#             # substitute with your code.
#             pass
        
#     def split_line_fun(self):
#         print("Your Plugin is loaded successfully!")
#         layer1 = self.iface.activeLayer()
#         feat1=layer1.getFeature(4)
#         geom1=feat1.geometry()
#         # split_points1 = [QgsPointXY(-564387.9410960825625807, 266753.78822469036094844),QgsPointXY(-685938.31257777661085129 ,-113008.99402622418710962)]
#         split_points1 = [QgsPointXY(-564387.9410960825625807, 266753.78822469036094844),QgsPointXY(-685938.31257777661085129 ,-113008.99402622418710962)]
#         # split_points2 = [QgsPointXY(-564387.9410960825625807, 266753.78822469036094844),QgsPointXY(-685938.31257777661085129 ,-113008.99402622418710962)]
#         splt1 = geom1.splitGeometry(split_points1,True)
#         splt1[1]
#         print(splt1[1])
#         layer1.startEditing()
#         feat2 = QgsFeature(layer1.fields())
#         feat2.setAttributes([0, 'total_length'])
#         # Or set a single attribute by key or by index:
#         # feat2.setAttribute('name', 'hello')
#         feat2.setAttribute(1, 'new_length')
#         feat2.setGeometry(splt1[1][0])
#         # (res1, outFeats1) = layer1.dataProvider().addFeatures([feat2])
#         layer1.dataProvider().addFeatures([feat2])
#         fid = 5
#         feat2.setId(fid)
#         fieldIndex0 = 0
#         valueFI0 = 6
#         layer1.changeAttributeValue(fid, fieldIndex0, valueFI0)
#         # layer1.commitChanges()
#         geom2=splt1[1][0]
#         cal_len=geom2.length()
#         fieldIndex1 = 1
#         fieldIndex2 = 2
        
#         layer1.changeAttributeValue(fid, fieldIndex1, cal_len)
        
#         print("Calculated length :",cal_len)

#         layer1.commitChanges()




# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Line_Split_Tool
                                 A QGIS plugin
 This Tool splits the line
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-08-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by me
        email                : me
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QEvent,QPoint
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .line_split_tool_dialog import Line_Split_ToolDialog
import os.path
from qgis.core import (
  QgsApplication,
  QgsDataSourceUri,
  QgsCategorizedSymbolRenderer,
  QgsClassificationRange,
  QgsPointXY,
  QgsProject,
  QgsExpression,
  QgsField,
  QgsFields,
  QgsFeature,
  QgsFeatureRequest,
  QgsFeatureRenderer,
  QgsGeometry,
  QgsGraduatedSymbolRenderer,
  QgsMarkerSymbol,
  QgsMessageLog,
  QgsRectangle,
  QgsRendererCategory,
  QgsRendererRange,
  QgsSymbol,
  QgsVectorDataProvider,
  QgsVectorLayer,
  QgsVectorFileWriter,
  QgsWkbTypes,
  QgsSpatialIndex,
  QgsVectorLayerUtils
)

from qgis.core.additions.edit import edit

from qgis.PyQt.QtGui import (
    QColor,QMouseEvent
)

class Line_Split_Tool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Line_Split_Tool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Line_Split_Tool')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Line_Split_Tool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/line_split_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Line Split Tool'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Line_Split_Tool'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Line_Split_ToolDialog()
            self.dlg.comboBox_2.insertItem(0,"Meters")
            l=self.iface.activeLayer()
            global itemList
            itemList=[]
            i = 0
            for f_item in l.getFeatures():
                itemList.append(f_item.id())
                self.dlg.comboBox.insertItem(f_item.id(),str(f_item.id()),f_item)
            # if self.dlg.radioButton.isChecked():
                # print("button is checked")
            self.dlg.button_box.clicked.connect(self.split_line_fun)
            # else:
                # print("please select an option")


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
        
    
    
    def split_line_fun(self):
        if self.dlg.radioButton.isChecked():
            p_list=[]
            global feat4
            print("Your Plugin is loaded successfully!")
            # if self.dlg.radioButton.isChecked():
            #     print("button is checked")
            l=self.iface.activeLayer()

            l.startEditing()
            v = self.dlg.spinBox.value()
            fl_v = float(v)
            featnumtxt = self.dlg.comboBox.currentText()
            featnum = int(featnumtxt)
            print("Your Selected Feature Number is :" ,featnum)
            feat3=l.getFeature(featnum)
            geom3=feat3.geometry()
            int_point = geom3.interpolate(fl_v)
            split_points1_1=int_point.asPoint()
            p_list.append(split_points1_1.x())
            p_list.append(split_points1_1.y())
            print(p_list[0])
            print(p_list[1])
            npc1 = p_list[0]+0.000001
            npc2 = p_list[0]-0.000001
            print(npc1)
            print(npc2)
            np1=QgsPointXY(npc1,p_list[1])
            np2=QgsPointXY(npc2,p_list[1])
            print(np1)
            print(np2)
            sp=[np1,np2]
            feat_split = l.splitFeatures(sp,False)
            l.changeAttributeValue(feat3.id(),1,geom3.length())
            l.commitChanges()
            feat3_new = l.getFeature(featnum)
            geom3_new = feat3_new.geometry()
            new_len = geom3_new.length()
            new_featnum = itemList.__len__()
            print("The new feature is:",new_featnum)
            new_f = l.getFeature(new_featnum)
            new_g = new_f.geometry()
            new_feat_len = new_g.length()
            lf=[feat3_new,new_f]
            for i  in lf:
                l.startEditing()
                l.changeAttributeValue(featnum,2,new_len)
                l.changeAttributeValue(new_featnum,2,new_feat_len)
                print(featnum,":",new_len)
                print(new_featnum,":",new_feat_len)
                # l.updateFeature(i)
                l.commitChanges()
        elif self.dlg.radioButton_2.isChecked():
            print("Applicable to all Features!")
            for f_i in itemList:
                p_list=[]
                global feat4
                print("Your Plugin is loaded successfully!")
                # if self.dlg.radioButton.isChecked():
                #     print("button is checked")
                l=self.iface.activeLayer()
                l.startEditing()
                v = self.dlg.spinBox.value()
                fl_v = float(v)
                featnumtxt = self.dlg.comboBox.currentText()
                featnum = int(featnumtxt)
                print("Your Selected Feature Number is :" ,featnum)
                feat3=l.getFeature(f_i)
                geom3=feat3.geometry()
                int_point = geom3.interpolate(fl_v)
                split_points1_1=int_point.asPoint()
                p_list.append(split_points1_1.x())
                p_list.append(split_points1_1.y())
                print(p_list[0])
                print(p_list[1])
                npc1 = p_list[0]+0.000001
                npc2 = p_list[0]-0.000001
                print(npc1)
                print(npc2)
                np1=QgsPointXY(npc1,p_list[1])
                np2=QgsPointXY(npc2,p_list[1])
                print(np1)
                print(np2)
                sp=[np1,np2]
                feat_split = l.splitFeatures(sp,False)
                l.changeAttributeValue(feat3.id(),1,geom3.length())
                l.commitChanges()
            new_itemlist=[]
            new_geomlist=[]
            new_lenlist=[]
            for i_itms in l.getFeatures():
                new_itemlist.append(i_itms)
                nf = i_itms
                feat_new_i = nf 
                geom_new_i = feat_new_i.geometry()
                new_geomlist.append(geom_new_i)
                new_len_i = geom_new_i.length()
                new_lenlist.append(new_len_i)
                l.startEditing()
                l.changeAttributeValue(feat_new_i.id(),2,new_len_i)
                l.commitChanges()

                